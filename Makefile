# ESC Football App - Makefile
# Espoir Sportif de Chorbane - Application de gestion d'√©quipe de football

# Variables
DOCKER_COMPOSE = docker-compose
BACKEND_DIR = backend
FRONTEND_DIR = frontend
PYTHON = python
NPM = npm
NG = ng

# Colors for output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

# Default target
.DEFAULT_GOAL := help

# Help target
.PHONY: help
help: ## Affiche l'aide
	@echo "$(BLUE)ESC Football App - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

# =============================================================================
# SETUP & INSTALLATION
# =============================================================================

.PHONY: install
install: ## Installation compl√®te du projet
	@echo "$(YELLOW)üöÄ Installation de l'application ESC Football...$(NC)"
	@$(MAKE) install-backend
	@$(MAKE) install-frontend
	@echo "$(GREEN)‚úÖ Installation termin√©e !$(NC)"

.PHONY: install-backend
install-backend: ## Installation des d√©pendances backend
	@echo "$(YELLOW)üì¶ Installation des d√©pendances Python...$(NC)"
	cd $(BACKEND_DIR) && pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ D√©pendances backend install√©es$(NC)"

.PHONY: install-frontend
install-frontend: ## Installation des d√©pendances frontend
	@echo "$(YELLOW)üì¶ Installation des d√©pendances Angular...$(NC)"
	cd $(FRONTEND_DIR) && $(NPM) install
	@echo "$(GREEN)‚úÖ D√©pendances frontend install√©es$(NC)"

.PHONY: setup
setup: ## Configuration initiale du projet
	@echo "$(YELLOW)üîß Configuration du projet ESC...$(NC)"
	@$(MAKE) setup-env
	@$(MAKE) setup-db
	@echo "$(GREEN)‚úÖ Configuration termin√©e !$(NC)"

.PHONY: setup-env
setup-env: ## Cr√©ation des fichiers d'environnement
	@echo "$(YELLOW)üìù Cr√©ation des fichiers d'environnement...$(NC)"
	@if [ ! -f $(BACKEND_DIR)/.env ]; then \
		cp $(BACKEND_DIR)/.env.example $(BACKEND_DIR)/.env; \
		echo "$(GREEN)‚úÖ Fichier .env cr√©√© pour le backend$(NC)"; \
	else \
		echo "$(BLUE)‚ÑπÔ∏è  Fichier .env existe d√©j√†$(NC)"; \
	fi

.PHONY: setup-db
setup-db: ## Initialisation de la base de donn√©es
	@echo "$(YELLOW)üóÑÔ∏è  Initialisation de la base de donn√©es...$(NC)"
	@$(MAKE) db-start
	@sleep 5
	cd $(BACKEND_DIR) && $(PYTHON) init_db.py
	@echo "$(GREEN)‚úÖ Base de donn√©es initialis√©e$(NC)"

# =============================================================================
# DEVELOPMENT
# =============================================================================

.PHONY: dev
dev: ## D√©marrage en mode d√©veloppement (backend + frontend)
	@echo "$(YELLOW)üöÄ D√©marrage en mode d√©veloppement...$(NC)"
	@$(MAKE) -j2 dev-backend dev-frontend

.PHONY: dev-backend
dev-backend: ## D√©marrage du backend en mode d√©veloppement
	@echo "$(YELLOW)üêç D√©marrage du backend Flask...$(NC)"
	cd $(BACKEND_DIR) && $(PYTHON) app.py

.PHONY: dev-frontend
dev-frontend: ## D√©marrage du frontend en mode d√©veloppement
	@echo "$(YELLOW)üÖ∞Ô∏è  D√©marrage du frontend Angular...$(NC)"
	cd $(FRONTEND_DIR) && $(NG) serve --host 0.0.0.0 --port 4200

.PHONY: dev-watch
dev-watch: ## D√©marrage avec rechargement automatique
	@echo "$(YELLOW)üëÄ D√©marrage avec surveillance des fichiers...$(NC)"
	@$(MAKE) -j2 dev-backend-watch dev-frontend

.PHONY: dev-backend-watch
dev-backend-watch: ## Backend avec rechargement automatique
	cd $(BACKEND_DIR) && $(PYTHON) -m flask run --reload --host=0.0.0.0 --port=5000

# =============================================================================
# DATABASE
# =============================================================================

.PHONY: db-start
db-start: ## D√©marrage des services de base de donn√©es
	@echo "$(YELLOW)üóÑÔ∏è  D√©marrage de PostgreSQL et Redis...$(NC)"
	$(DOCKER_COMPOSE) up -d db redis
	@echo "$(GREEN)‚úÖ Services de base de donn√©es d√©marr√©s$(NC)"

.PHONY: db-stop
db-stop: ## Arr√™t des services de base de donn√©es
	@echo "$(YELLOW)üõë Arr√™t des services de base de donn√©es...$(NC)"
	$(DOCKER_COMPOSE) stop db redis
	@echo "$(GREEN)‚úÖ Services de base de donn√©es arr√™t√©s$(NC)"

.PHONY: db-reset
db-reset: ## R√©initialisation compl√®te de la base de donn√©es
	@echo "$(RED)‚ö†Ô∏è  R√©initialisation de la base de donn√©es...$(NC)"
	@read -p "√ätes-vous s√ªr de vouloir supprimer toutes les donn√©es ? (y/N): " confirm && [ "$$confirm" = "y" ]
	$(DOCKER_COMPOSE) down -v
	$(DOCKER_COMPOSE) up -d db redis
	@sleep 5
	cd $(BACKEND_DIR) && $(PYTHON) init_db.py
	@echo "$(GREEN)‚úÖ Base de donn√©es r√©initialis√©e$(NC)"

.PHONY: db-backup
db-backup: ## Sauvegarde de la base de donn√©es
	@echo "$(YELLOW)üíæ Sauvegarde de la base de donn√©es...$(NC)"
	@mkdir -p backups
	$(DOCKER_COMPOSE) exec db pg_dump -U esc_user esc_db > backups/esc_backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e dans le dossier backups/$(NC)"

.PHONY: db-restore
db-restore: ## Restauration de la base de donn√©es (usage: make db-restore FILE=backup.sql)
	@echo "$(YELLOW)üîÑ Restauration de la base de donn√©es...$(NC)"
	@if [ -z "$(FILE)" ]; then echo "$(RED)‚ùå Veuillez sp√©cifier le fichier: make db-restore FILE=backup.sql$(NC)"; exit 1; fi
	$(DOCKER_COMPOSE) exec -T db psql -U esc_user -d esc_db < $(FILE)
	@echo "$(GREEN)‚úÖ Base de donn√©es restaur√©e$(NC)"

.PHONY: db-shell
db-shell: ## Connexion au shell PostgreSQL
	@echo "$(YELLOW)üêò Connexion √† PostgreSQL...$(NC)"
	$(DOCKER_COMPOSE) exec db psql -U esc_user -d esc_db

# =============================================================================
# DOCKER
# =============================================================================

.PHONY: docker-build
docker-build: ## Construction des images Docker
	@echo "$(YELLOW)üê≥ Construction des images Docker...$(NC)"
	$(DOCKER_COMPOSE) build
	@echo "$(GREEN)‚úÖ Images Docker construites$(NC)"

.PHONY: docker-up
docker-up: ## D√©marrage de tous les services Docker
	@echo "$(YELLOW)üê≥ D√©marrage de tous les services...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Tous les services sont d√©marr√©s$(NC)"

.PHONY: docker-down
docker-down: ## Arr√™t de tous les services Docker
	@echo "$(YELLOW)üõë Arr√™t de tous les services...$(NC)"
	$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ Tous les services sont arr√™t√©s$(NC)"

.PHONY: docker-logs
docker-logs: ## Affichage des logs Docker
	$(DOCKER_COMPOSE) logs -f

.PHONY: docker-ps
docker-ps: ## Statut des conteneurs Docker
	$(DOCKER_COMPOSE) ps

# =============================================================================
# DOCKER COMPOSE SP√âCIALIS√âS
# =============================================================================

.PHONY: dev-docker
dev-docker: ## D√©marrage avec docker-compose.dev.yml
	@echo "$(YELLOW)üê≥ D√©marrage en mode d√©veloppement Docker...$(NC)"
	docker-compose -f docker-compose.dev.yml up -d
	@echo "$(GREEN)‚úÖ Services de d√©veloppement d√©marr√©s$(NC)"

.PHONY: prod-docker
prod-docker: ## D√©marrage avec docker-compose.prod.yml
	@echo "$(YELLOW)üê≥ D√©marrage en mode production Docker...$(NC)"
	docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
	@echo "$(GREEN)‚úÖ Services de production d√©marr√©s$(NC)"

.PHONY: test-docker
test-docker: ## Ex√©cution des tests avec Docker
	@echo "$(YELLOW)üê≥ Ex√©cution des tests avec Docker...$(NC)"
	docker-compose -f docker-compose.test.yml up --abort-on-container-exit
	@echo "$(GREEN)‚úÖ Tests termin√©s$(NC)"

.PHONY: monitoring-up
monitoring-up: ## D√©marrage des services de monitoring
	@echo "$(YELLOW)üê≥ D√©marrage du monitoring...$(NC)"
	docker-compose -f docker-compose.monitoring.yml up -d
	@echo "$(GREEN)‚úÖ Services de monitoring d√©marr√©s$(NC)"

.PHONY: monitoring-down
monitoring-down: ## Arr√™t des services de monitoring
	@echo "$(YELLOW)üõë Arr√™t du monitoring...$(NC)"
	docker-compose -f docker-compose.monitoring.yml down
	@echo "$(GREEN)‚úÖ Services de monitoring arr√™t√©s$(NC)"

.PHONY: tools-up
tools-up: ## D√©marrage des outils de d√©veloppement
	@echo "$(YELLOW)üê≥ D√©marrage des outils...$(NC)"
	$(DOCKER_COMPOSE) --profile tools up -d
	@echo "$(GREEN)‚úÖ Outils de d√©veloppement d√©marr√©s$(NC)"

# =============================================================================
# TESTING
# =============================================================================

.PHONY: test
test: ## Ex√©cution de tous les tests
	@echo "$(YELLOW)üß™ Ex√©cution des tests...$(NC)"
	@$(MAKE) test-backend
	@$(MAKE) test-frontend
	@echo "$(GREEN)‚úÖ Tous les tests termin√©s$(NC)"

.PHONY: test-backend
test-backend: ## Tests backend Python
	@echo "$(YELLOW)üêç Tests backend...$(NC)"
	cd $(BACKEND_DIR) && $(PYTHON) -m pytest tests/ -v
	@echo "$(GREEN)‚úÖ Tests backend termin√©s$(NC)"

.PHONY: test-frontend
test-frontend: ## Tests frontend Angular
	@echo "$(YELLOW)üÖ∞Ô∏è  Tests frontend...$(NC)"
	cd $(FRONTEND_DIR) && $(NPM) test
	@echo "$(GREEN)‚úÖ Tests frontend termin√©s$(NC)"

.PHONY: test-e2e
test-e2e: ## Tests end-to-end
	@echo "$(YELLOW)üîÑ Tests end-to-end...$(NC)"
	cd $(FRONTEND_DIR) && $(NPM) run e2e
	@echo "$(GREEN)‚úÖ Tests e2e termin√©s$(NC)"

# =============================================================================
# BUILD & DEPLOYMENT
# =============================================================================

.PHONY: build
build: ## Construction pour la production
	@echo "$(YELLOW)üèóÔ∏è  Construction pour la production...$(NC)"
	@$(MAKE) build-frontend
	@echo "$(GREEN)‚úÖ Construction termin√©e$(NC)"

.PHONY: build-frontend
build-frontend: ## Construction du frontend
	@echo "$(YELLOW)üÖ∞Ô∏è  Construction du frontend Angular...$(NC)"
	cd $(FRONTEND_DIR) && $(NG) build --configuration production
	@echo "$(GREEN)‚úÖ Frontend construit$(NC)"

.PHONY: deploy-prod
deploy-prod: ## D√©ploiement en production
	@echo "$(YELLOW)üöÄ D√©ploiement en production...$(NC)"
	@$(MAKE) build
	$(DOCKER_COMPOSE) -f docker-compose.yml --profile production up -d
	@echo "$(GREEN)‚úÖ D√©ploiement termin√©$(NC)"

# =============================================================================
# MAINTENANCE
# =============================================================================

.PHONY: clean
clean: ## Nettoyage des fichiers temporaires
	@echo "$(YELLOW)üßπ Nettoyage...$(NC)"
	@$(MAKE) clean-backend
	@$(MAKE) clean-frontend
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

.PHONY: clean-backend
clean-backend: ## Nettoyage backend
	@echo "$(YELLOW)üêç Nettoyage backend...$(NC)"
	cd $(BACKEND_DIR) && find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	cd $(BACKEND_DIR) && find . -name "*.pyc" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Backend nettoy√©$(NC)"

.PHONY: clean-frontend
clean-frontend: ## Nettoyage frontend
	@echo "$(YELLOW)üÖ∞Ô∏è  Nettoyage frontend...$(NC)"
	cd $(FRONTEND_DIR) && rm -rf dist/ node_modules/.cache/ 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Frontend nettoy√©$(NC)"

.PHONY: clean-docker
clean-docker: ## Nettoyage Docker complet
	@echo "$(YELLOW)üê≥ Nettoyage Docker...$(NC)"
	$(DOCKER_COMPOSE) down -v --remove-orphans
	docker system prune -f
	@echo "$(GREEN)‚úÖ Docker nettoy√©$(NC)"

.PHONY: update
update: ## Mise √† jour des d√©pendances
	@echo "$(YELLOW)üîÑ Mise √† jour des d√©pendances...$(NC)"
	cd $(BACKEND_DIR) && pip install --upgrade -r requirements.txt
	cd $(FRONTEND_DIR) && $(NPM) update
	@echo "$(GREEN)‚úÖ D√©pendances mises √† jour$(NC)"

# =============================================================================
# UTILITIES
# =============================================================================

.PHONY: status
status: ## Statut de l'application
	@echo "$(BLUE)üìä Statut de l'application ESC Football:$(NC)"
	@echo ""
	@echo "$(YELLOW)üê≥ Services Docker:$(NC)"
	@$(DOCKER_COMPOSE) ps || echo "$(RED)‚ùå Docker Compose non disponible$(NC)"
	@echo ""
	@echo "$(YELLOW)üåê Endpoints:$(NC)"
	@echo "  ‚Ä¢ Backend API: http://localhost:5000"
	@echo "  ‚Ä¢ Frontend:    http://localhost:4200"
	@echo "  ‚Ä¢ pgAdmin:     http://localhost:5050"
	@echo ""

.PHONY: logs
logs: ## Affichage des logs en temps r√©el
	@echo "$(YELLOW)üìã Logs de l'application...$(NC)"
	$(DOCKER_COMPOSE) logs -f backend frontend

.PHONY: shell-backend
shell-backend: ## Shell dans le conteneur backend
	$(DOCKER_COMPOSE) exec backend bash

.PHONY: shell-frontend
shell-frontend: ## Shell dans le conteneur frontend
	$(DOCKER_COMPOSE) exec frontend bash

.PHONY: health
health: ## V√©rification de la sant√© de l'application
	@echo "$(YELLOW)üè• V√©rification de la sant√©...$(NC)"
	@curl -s http://localhost:5000/api/health || echo "$(RED)‚ùå Backend non accessible$(NC)"
	@curl -s http://localhost:4200 > /dev/null && echo "$(GREEN)‚úÖ Frontend accessible$(NC)" || echo "$(RED)‚ùå Frontend non accessible$(NC)"

# =============================================================================
# QUICK START
# =============================================================================

.PHONY: quick-start
quick-start: ## D√©marrage rapide complet
	@echo "$(BLUE)üèà ESC Football App - D√©marrage rapide$(NC)"
	@echo "$(YELLOW)üöÄ Installation et d√©marrage...$(NC)"
	@$(MAKE) setup-env
	@$(MAKE) db-start
	@sleep 5
	@$(MAKE) setup-db
	@echo "$(GREEN)‚úÖ Application pr√™te !$(NC)"
	@echo ""
	@echo "$(BLUE)Pour d√©marrer le d√©veloppement:$(NC)"
	@echo "  make dev"
	@echo ""
	@echo "$(BLUE)Endpoints disponibles:$(NC)"
	@echo "  ‚Ä¢ API: http://localhost:5000/api/health"
	@echo "  ‚Ä¢ Frontend: http://localhost:4200 (apr√®s 'make dev-frontend')"
	@echo ""

# =============================================================================
# ALIASES
# =============================================================================

.PHONY: start
start: dev ## Alias pour 'dev'

.PHONY: stop
stop: docker-down ## Alias pour 'docker-down'

.PHONY: restart
restart: ## Red√©marrage complet
	@$(MAKE) stop
	@$(MAKE) start

.PHONY: init
init: quick-start ## Alias pour 'quick-start'
